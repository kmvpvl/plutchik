<!DOCTYPE html>
<html lang="en">
<head>
<script src="https://telegram.org/js/telegram-web-app.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
<!--link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"-->
<style>
@font-face {
    font-family: "UbuntuMono";
    src: url("UbuntuMono-Regular.ttf");
}
* {
    box-sizing: border-box;
}    
html {
    height: 100%;
    font-family: "UbuntuMono", monospace;
}
body {
    min-height: 100%;
    max-height: 100%;
    min-width: 100%;
    max-width: 100%;
    overflow:hidden;
    width: 100%;
    height:100%;
    display: grid;
    grid-template-rows: auto auto 1fr auto;
    margin: 0;
    padding: 2px;
    color: var(--tg-theme-text-color);
    background-color: var(--tg-theme-bg-color);
}
.header {
    font-size: larger;
}
.navigation {
    display: grid;
    grid-template-columns: auto 1fr auto;
    column-gap: 5px;
}
.filters-n-content {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 5px;
    overflow: scroll;
    max-height: 100%;
}
.filters-by-letter {
    display: flex;
    flex-direction: row;
    flex-flow: column;
    cursor: pointer;
}
.filter-letter {
    border-right: var(--tg-theme-text-color) 1px solid;
    border-bottom: var(--tg-theme-text-color) 1px solid;
    padding: 5px;
    border-top-right-radius: 5px;
    border-bottom-right-radius: 5px;
}
.content-management-block {
    display: grid;
    grid-template-rows: auto auto 1fr;
}

.joy{
  fill:#edc500;
  background-color:#edc500;
} 
.trust{
  fill:#7abd0d;
  background-color:#7abd0d;
}
.fear{
  fill:#007b33;
  background-color:#007b33;
}
.surprise{
  fill:#0080ab;
  background-color:#0080ab;
}
.sadness{
  fill:#1f6dad;
  background-color:#1f6dad;
}
.disgust{
  fill:#7b4ea3;
  background-color:#7b4ea3;
}
.anger{
  fill:#dc0047;
  background-color:#dc0047;
}
.anticipation{
  fill:#e87200;
  background-color:#e87200;
}
.dotted {
  fill:transparent;
  stroke-width: 1px;
  opacity: 0.5;
  stroke: var(--tg-theme-text-color);
}
.disabled{
  fill:silver;
  background-color:silver;
}
.content {
    overflow: scroll;
    max-width: 100%;
    max-height: 100%;
    display: grid;
    grid-template-rows: 1fr auto;
}
.fit-img {
    max-width: 100%;
    max-height: 100%;
    min-width: auto;
    min-height: auto;
    overflow: hidden;
}
.nav-items {
    display: flex;
    flex-flow: row;
    flex-direction: row;
    overflow: scroll;
    overflow: scroll;
    gap: 2px;
}
.nav-item {
    max-width: 50px;
    max-height: 50px;
    min-width: 50px;
    min-width: 50px;
    width: 50px;
    height: 50px;
    border: var(--tg-theme-text-color) 1px solid;
    text-align: center;
    padding: auto;
    cursor: pointer;
    overflow: hidden;
}
.fields {
    display: grid;
    grid-template-rows: auto auto auto auto;
}
input.wide {
    width: 100%;
}
div.info, div.error {
    position: absolute;
    width: 80%;
    height: auto;
    min-height: fit-content;
    max-height: fit-content;
    margin: auto;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    overflow: auto;
    border-radius: 5px;
    padding: 20px;
}
div.info {
    border: darkgreen 1px solid;
    background-color:lightgreen;
    color: darkgreen;
}
div.error {
    border: darkred 1px solid;
    background-color:lightcoral;
    color: darkred;
}
</style>
</head>
<body>
<div class="header">Organization name</div>
<div class="navigation">
    <span>←</span>
    <span class="nav-items"></span>
    <span>→</span>
</div>
<div class="filters-n-content">
    <div class="filters-by-letter">
    </div>
    <div class="content-management-block">
        <div class="filters">Show
            <input type="checkbox" id="chk-all">All
            <input type="checkbox" id="chk-videos">Videos
            <input type="checkbox" id="chk-images">Images
            <input type="checkbox" id="chk-texts">Texts
        </div>
        <div class="content-controls">
            <button action="btn-block">Block</button>
            <button action="btn-save">Save</button>
        </div>
        <div class="content">
            <div class="content-area">Content</div>
            <div class="fields">
                <div>
                    <input id="inp-name" placeholder="Name">
                    <select id="inp-language" placeholder="Language">
                        <option value="en">en</option>
                        <option value="es">es</option>
                        <option value="de">de</option>
                        <option value="uk">uk</option>
                        <option value="ru">ru</option>
                    </select>
                </div>
                <div><input class="wide" id="inp-description" placeholder="Description"></div>
                <div><input class="wide" id="inp-url" placeholder="Url"></div>
                <div>
                    <input class="wide" id="inp-groups" placeholder="Groups">
                    <input type="hidden" id="inp-cid">
                </div>
            </div>
        </div>
    </div>
</div>
<div class="footer">
    <button action="btn-block">Block</button>
    <button action="btn-save">Save</button>
</div>
<script>
let tg = window.Telegram.WebApp;
let loadedData = undefined;

function displayInfo(text) {
    $('body').append(`<div class="info">${text}</div>`);
    setTimeout(()=>$('div.info').remove(), 1500);
}

function displayError(text) {
    $('body').append(`<div class="error">${text}</div>`);
    $('div.error').on('click', ()=>{
        $('div.error').remove();
    });
}

function yt_id(url) {
    const r = url.match(/^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/|shorts\/)|(?:(?:watch)?\?v(?:i)?=|\&v(?:i)?=))([^#\&\?]*).*/);
    return r?r[1]:undefined;
}

const assess = new Map([
    ['en', 'Assess']
    ,['ru', 'Оценить']
    ,['de', 'Bewerten']
    ,['es', 'Evaluar']
    ,['uk', 'Оцінити']
]);


const emotions = ['joy','trust','fear','surprise','sadness','disgust','anger','anticipation'];
const ml_emotions = new Map([
    ['en', new Map([
        ['joy','joy']
        ,['trust','trust']
        ,['fear', 'fear']
        ,['surprise', 'surprise']
        ,['sadness', 'sadness']
        ,['disgust', 'disgust']
        ,['anger', 'anger']
        ,['anticipation', 'anticipation']
    ])],
    ['de', new Map([
        ['joy','Freude']
        ,['trust','Vertrauen']
        ,['fear', 'Furcht']
        ,['surprise', 'Erstaunen']
        ,['sadness', 'Missvergnügen']
        ,['disgust', 'Ekel']
        ,['anger', 'Wut']
        ,['anticipation', 'Vorwegnahme']
    ])],
    ['es', new Map([
        ['joy','alegría']
        ,['trust','confianza']
        ,['fear', 'miedo']
        ,['surprise', 'asombro']
        ,['sadness', 'molestia']
        ,['disgust', 'asco']
        ,['anger', 'enojo']
        ,['anticipation', 'anticipación']
    ])],
    ['uk', new Map([
        ['joy','радість']
        ,['trust','довіра']
        ,['fear', 'страх']
        ,['surprise', 'здивування']
        ,['sadness', 'смуток']
        ,['disgust', 'огида']
        ,['anger', 'гнів']
        ,['anticipation', 'очікування']
    ])],
   ['ru', new Map([
        ['joy','радость']
        ,['trust','доверие']
        ,['fear', 'страх']
        ,['surprise', 'удивление']
        ,['sadness', 'досада']
        ,['disgust', 'отвращение']
        ,['anger', 'злость']
        ,['anticipation', 'предвкушение']
    ])]
]);

const myEmotions = new Map([
    ['en', 'My emotions']
    ,['ru', 'Мои эмоции']
    ,['de', 'Meine Gefühle']
    ,['es', 'Mis emociones']
    ,['uk', 'мої емоції']
]);

const thatsAll = new Map([
    ['en', `Sorry, that's all content `]
    ,['ru', 'Извините на этом всё']
    ,['de', 'Entschuldigung, das ist alles']
    ,['es', 'lo siento, eso es todo']
    ,['uk', 'Вибачте, на цьому все']
]);

const pressToNew = new Map([
    ['en', `Press button to get new content item`]
    ,['ru', 'Нажмите кнопку, чтобы получить новый контент для оценки']
    ,['de', 'Klicken Sie auf die Schaltfläche, um neue Inhalte zum Bewerten zu erhalten']
    ,['es', 'Haga clic en el botón para obtener contenido nuevo para calificar']
    ,['uk', 'Натисніть кнопку, щоб отримати новий контент для оцінки']
]);

function selectItem(id) {
    const ci = loadedData.items.filter((el)=>el._id == id)[0];
    $('.content-area').html(`${ci.type=='image'?'<img class="fit-img" src="'+ci.url+'"></img':'T'}`);
    $('#inp-name').val(ci.name);
    $('#inp-description').val(ci.description);
    $('#inp-url').val(ci.url);
    $('#inp-language').val(ci.language);
    $('#inp-cid').val(id);
    $('button[action="btn-block"]').text(ci.blocked?'Unblock':'Block');
}

function init() {
    $.get(`/telegram?command=manage_content&tg_user_id=${tg.initDataUnsafe.user.id}`, (data, status, xhdr)=>{
        if ('success' == status) {
            loadedData = data;
            $('.filters-by-letter').html('');
            for (i in data.letters) {
                $('.filters-by-letter').append(`<span class="filter-letter">${data.letters[i]._id}</span>`);
            }
            $('.filter-letter').on('click', (ev)=>{
                $('#chk-all').prop('checked', false);
                $('.nav-item').show();
                const letter = ev.currentTarget.innerText;
                const naviToHide = loadedData.items.filter((el)=>!el.name.startsWith(letter));
                naviToHide.forEach((v)=>$(`.nav-item[cid="${v._id}"]`).hide());
            });

            $('.nav-items').html('');
            for (i in data.items) {
                $('.nav-items').append(`<span class="nav-item" idx="${i}" cid="${data.items[i]._id}">${data.items[i].type=='image'?'<img class="fit-img" src="'+data.items[i].url+'"></img>':'T'}</span>`);
            }
            $('.nav-item').on('click', (event)=>{
                selectItem(event.currentTarget.attributes['cid'].value);
            });
            $('.header').html(`${data.org.name} - ${data.items.length} content items`);
        } else {
            displayError(`not fail but status = '${status}'`);
        }
    })
    .fail((xhr, status, errorObj)=>{
        displayError(`fail status = '${xhr.status}'`);
    });
}
init();
render();
function render() {
}
tg.expand();
$('button[action="btn-save"]').on('click', (e)=>{
    $.ajaxSetup({
        headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'userid': loadedData.user._id,
            'sessiontoken': loadedData.sessiontoken
        }
    });
    const ci = loadedData.items.filter((el)=>el._id == $('#inp-cid').val())[0];
    ci.name = $('#inp-name').val();
    ci.description = $('#inp-description').val();
    ci.url = $('#inp-url').val();
    ci.language = $('#inp-language').val();
    $.post(`addcontent`, JSON.stringify({
            "contentinfo": ci
        }), (data, status, xhdr)=>{
        if ('success' == status) {
            // ok
            selectItem(ci._id);
            displayInfo('Changes saved');
        } else {
            displayError(`not fail but status = '${status}'`);
        }
    })
    .fail((xhr, status, errorObj)=>{
        displayError(`fail status = '${xhr.status}'`);
    });
});
$('#chk-all').on('change', ()=>$('.nav-item').show());
$('button[action="btn-block"]').on('click', ()=>{
    $.ajaxSetup({
        headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'userid': loadedData.user._id,
            'sessiontoken': loadedData.sessiontoken
        }
    });
    const ci = loadedData.items.filter((el)=>el._id == $('#inp-cid').val())[0];
    $.get(`${ci.blocked?'un':''}blockcontent/${ci._id}`, (data, status, xhdr)=>{
        if ('success' == status) {
            ci.blocked = !ci.blocked;
            selectItem(ci._id);
            displayInfo('Changes saved');
        } else {
            displayError(`not fail but status = '${status}'`);
        }
    })
    .fail((xhr, status, errorObj)=>{
        displayError(`fail status = '${xhr.status}'`);
    });
})
</script>
</body>
</html>