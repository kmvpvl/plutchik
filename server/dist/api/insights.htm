<!DOCTYPE html>
<html lang="en">
<head>
<script src="https://telegram.org/js/telegram-web-app.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
<style>
@font-face {
    font-family: "UbuntuMono";
    src: url("UbuntuMono-Regular.ttf");
}
* {
    box-sizing: border-box;
}    
html {
    height: 100%;
    font-family: "UbuntuMono", monospace;
}
body {
    min-height: 100%;
    max-height: 100%;
    min-width: 100%;
    max-width: 100%;
    overflow:hidden;
    width: 100%;
    height:100%;
    margin: 0;
    padding: 2px;
    color: var(--tg-theme-text-color);
    background-color: var(--tg-theme-bg-color);
    display: grid;
    grid-template-rows: 1fr;
}
.joy{
  fill:#edc500;
  background-color:#edc500;
} 
.trust{
  fill:#7abd0d;
  background-color:#7abd0d;
}
.fear{
  fill:#007b33;
  background-color:#007b33;
}
.surprise{
  fill:#0080ab;
  background-color:#0080ab;
}
.sadness{
  fill:#1f6dad;
  background-color:#1f6dad;
}
.disgust{
  fill:#7b4ea3;
  background-color:#7b4ea3;
}
.anger{
  fill:#dc0047;
  background-color:#dc0047;
}
.anticipation{
  fill:#e87200;
  background-color:#e87200;
}
.dotted {
  fill:transparent;
  stroke-width: 1px;
  opacity: 0.5;
  stroke: var(--tg-theme-text-color);
}
.disabled{
  fill:silver;
  background-color:silver;
}
.flower {
    width: 100%;
    height: 100%;
    text-align: center;
}
.content {
    min-height: 100%;
    max-height: 100%;
    min-width: 100%;
    max-width: 100%;
    overflow:hidden;
    width: 100%;
    height:100%;
    margin: 0;
    display: grid;
    grid-template-rows: auto 1fr auto 1fr;
}
.header {
    text-align: center;
    font-size: x-large;
}
</style>
</head>
<body>
<div class="content">
    <span id="own-header" class="header"></span>
    <span id="flower_own" class="flower"></span>
    <span id="others-header" class="header"></span>
    <span id="flower_others" class="flower"></span>
</div>
<script>
const assess = new Map([
    ['en', 'Assess']
    ,['ru', 'Оценить']
    ,['de', 'Bewerten']
    ,['es', 'Evaluar']
    ,['uk', 'Оцінити']
]);

const emotions = ['joy','trust','fear','surprise','sadness','disgust','anger','anticipation'];

const ml_emotions = new Map([
    ['en', new Map([
        ['joy','joy']
        ,['trust','trust']
        ,['fear', 'fear']
        ,['surprise', 'surprise']
        ,['sadness', 'sadness']
        ,['disgust', 'disgust']
        ,['anger', 'anger']
        ,['anticipation', 'anticipation']
    ])],
    ['de', new Map([
        ['joy','Freude']
        ,['trust','Vertrauen']
        ,['fear', 'Furcht']
        ,['surprise', 'Erstaunen']
        ,['sadness', 'Missvergnügen']
        ,['disgust', 'Ekel']
        ,['anger', 'Wut']
        ,['anticipation', 'Vorwegnahme']
    ])],
    ['es', new Map([
        ['joy','alegría']
        ,['trust','confianza']
        ,['fear', 'miedo']
        ,['surprise', 'asombro']
        ,['sadness', 'molestia']
        ,['disgust', 'asco']
        ,['anger', 'enojo']
        ,['anticipation', 'anticipación']
    ])],
    ['uk', new Map([
        ['joy','радість']
        ,['trust','довіра']
        ,['fear', 'страх']
        ,['surprise', 'здивування']
        ,['sadness', 'смуток']
        ,['disgust', 'огида']
        ,['anger', 'гнів']
        ,['anticipation', 'очікування']
    ])],
   ['ru', new Map([
        ['joy','радость']
        ,['trust','доверие']
        ,['fear', 'страх']
        ,['surprise', 'удивление']
        ,['sadness', 'досада']
        ,['disgust', 'отвращение']
        ,['anger', 'злость']
        ,['anticipation', 'предвкушение']
    ])]
]);

const myEmotions = new Map([
    ['en', 'My emotions']
    ,['ru', 'Мои эмоции']
    ,['de', 'Meine Gefühle']
    ,['es', 'Mis emociones']
    ,['uk', 'мої емоції']
]);

const othersEmotions = new Map([
    ['en', `Emotions of people who rated the same content`]
    ,['ru', 'Эмоции людей, оценивших тот же контент']
    ,['de', 'Emotionen von Personen, die denselben Inhalt bewertet haben']
    ,['es', 'Emociones de las personas que calificaron el mismo contenido']
    ,['uk', 'Емоції людей, які оцінили один і той же контент']
]);

let tg = window.Telegram.WebApp;
tg.MainButton.hide();

function init() {
    $.ajaxSetup({
        headers: {
            'Content-Type': 'application/json; charset=utf-8',
        }
    });
    $.get(`/telegram?command=observe&tg_user_id=${tg.initDataUnsafe.user.id}`, (data, status, xhdr)=>{
        if ('success' == status) {
            render(data.user.nativelanguage);
            $('#own-header').append(`: ${data.observe.ownVector.count}`);
            $('#others-header').append(`: ${data.observe.othersVector.count}`);
            drawCharts($('#flower_own'), data.observe.ownVector, data.user.nativelanguage);
            drawCharts($('#flower_others'), data.observe.othersVector, data.user.nativelanguage);
            //drawFlower($('#flower_others'), data.observe.othersVector);
        } else {
            $('.content').text(status);
        }
    })
    .fail((xhr, status, errorObj)=>{
        $('.content').text(xhr.status);
    });
}
init();
render();
function render(lang = 'en') {
    $('#own-header').text(myEmotions.get(lang));
    $('#others-header').text(othersEmotions.get(lang));
}
tg.expand();

function drawCharts (element, emotion, lang='en') {
	const w = element.innerWidth();
	const h = element.innerHeight();
	const N = 8;
    const we = w/N;
    const wc = 20; 
	var s = `<svg class="flower" viewbox="0 0 ${w} ${h}" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="width: ${w}px;height: ${h}px;">`;
	if (emotion) {
		for (i=0; i<N; i++) {
            const v = emotion[emotions[i]]?emotion[emotions[i]]:0;
            const y = h*v;
            s += `<rect class="${emotions[i]}" x="${i* we}" y="${h-y}" width="${wc}" height="${y}"></rect>`;
            s += `<text class="${v?emotions[i]:'disabled'}" x="0" y="0" transform="rotate(270) translate(${-h},${we*i+2*wc})">${ml_emotions.get(lang).get(emotions[i])}</text>`;
        }
    }
    s += '</svg>';
    element.html(s);
    
}

function drawFlower (element, emotion) {
	var w = element.innerHeight();
	var R = w / 2;
	var r = R * 0.6;
	var N = 8;
	var s = '<svg class="flower" viewbox="-'+R+' -'+R+' '+w+' '+w+'" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="width:'+w+'px;height:'+w+'px;">';
	if (emotion) {
		for (i=0; i<N; i++) {
			var axis = parseFloat(emotion[emotions[i]]);
			if (!axis) R = w/2;
			else R = axis * w/2;
			r = R * 0.6;
			av = 2 * Math.PI * i / N;
			xv = Math.round(R * Math.sin(av));
			yv = -Math.round(R * Math.cos(av));
			ac1 = 2 * Math.PI * i / N + Math.PI/N;
			ac2 = 2 * Math.PI * i / N - Math.PI/N;
			xc1 = Math.round(r * Math.sin(ac1));
			xc2 = Math.round(r * Math.sin(ac2));
			yc1 = -Math.round(r * Math.cos(ac1));
			yc2 = -Math.round(r * Math.cos(ac2));
			s += '<path class="'+(axis?emotions[i]:'dotted')+'" d="M 0,0 L '+xc1+','+yc1+' Q '+xv+','+yv+' '+xc2+','+yc2+' L 0,0 z"></path>\n';
		}
	}
	s += '</svg>';
	element.html(s);
}

</script>
</body>
</html>